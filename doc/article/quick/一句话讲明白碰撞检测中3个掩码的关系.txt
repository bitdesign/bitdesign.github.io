碰撞检测中有3个掩码参数，共同决定碰撞效果。分别是分类掩码，碰撞掩码，测试掩码。一句话理清3个掩码之间的关系如下:

当A物体的分类掩码和B物体的碰撞掩码逻辑与非零时，触发碰撞。A和B发生碰撞后，继续检测A物体的分类掩码和B物体的测试掩码逻辑与的结果，继续非零，则发出碰撞消息（即能被回调函数捕获).
另外有一点需要注意：所有逻辑与的检测均为交叉检测，例如:A物体的分类掩码和B物体的碰撞掩码逻辑与，B物体的分类掩码和A物体的碰撞掩码逻辑与, 需要同时非0。测试掩码检测同理。
简化描述：仅当CategoryBitmask&CollisionBitmask交叉检测非0时发生碰撞, 发生碰撞后CategoryBitmask和ContactTestBitmask继续做逻辑与，仍非0才发出碰撞消息。

举一个实际的例子：
现有 HERO（1个)，子弹(多个)，敌人(多个)。 HERO不停发射子弹攻击敌人。碰撞检测需求为: HERO和多个子弹直接互不碰撞。HERO或子弹与敌人接触后，发生碰撞，并发出碰撞消息。
分析设置如下:

HERO和子弹一致，即把HERO看做一颗子弹， HERO和子弹不碰但和敌人碰

1. 碰撞参数设置
子弹   分类码0010  碰撞码0001   0010&0001=0000 则保证内部不碰撞  
敌人   分类码1001  碰撞码0010   1001&0010=0000 内部不碰
交叉检测   子弹分类码0010&敌人碰撞码0010=0010 ,且子弹碰撞码0001&敌人分类码1001=0001 即子弹和敌人产生碰撞反应
 
2.碰撞消息设置  
子弹   检测码0001
敌人   检测码0010

子弹分类码0010 & 敌人检测码0010 非零 
敌人分类码1001 & 子弹检测码0001 非零 
由于交叉检测同时非0,所以发出碰撞消息，才能被回调函数捕获

设置思路：
1.先保证同一类内部不发生碰撞，不发生碰到就更谈不上发出碰撞消息
2.调整参数，使不同类之间发生碰撞，且不影响同类之间的碰撞。
3. 发生碰撞后，继续调整测试码，决定是否发出碰撞消息。
